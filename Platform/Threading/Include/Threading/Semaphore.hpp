//////////////////////////////////////////////////////////////////////////
#pragma once
#include "Threading/Threading.hpp"
#include "Platform/Threading/Types.hpp"


namespace Cpf
{
	namespace Platform
	{
		namespace Threading
		{
			//////////////////////////////////////////////////////////////////////////
			/// Threading synchronization semaphore.
			//////////////////////////////////////////////////////////////////////////
			class CPF_EXPORT_THREADING Semaphore
			{
			public:
				//////////////////////////////////////////////////////////////////////////
				Semaphore(int initCount = 0);
				~Semaphore();

				//////////////////////////////////////////////////////////////////////////
				void Acquire();
				void Release(int count = 1);

			private:
				//////////////////////////////////////////////////////////////////////////
				Semaphore(const Semaphore&) = delete;
				Semaphore& operator =(const Semaphore&) = delete;
				Semaphore(Semaphore&&) = delete;
				Semaphore& operator =(Semaphore&&) = delete;

				//////////////////////////////////////////////////////////////////////////
				Semaphore_t m_Handle;
			};
		}
	}
}
