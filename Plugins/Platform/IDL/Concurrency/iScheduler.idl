import iUnknown from CPF::GOM;

module CPF::Concurrency;

struct WorkContext;

interface iFence;
interface iWorkBuffer;
interface iThreadTimes;

WorkFunction = void(const WorkContext* context, void* data);

enum SchedulingPriority : s32
{
	eLowest = 0,
	eLow,
	eNormal,
	eHigh,
	eHighest
}

interface iScheduler : GOM::iUnknown
{
	const class_id kCID ("CPF::Concurrency::iScheduler");

	result Initialize(s32 threadCount, WorkFunction init, WorkFunction shutdown, void* context);
	void Shutdown();

	s32 GetMaxThreads();
	s32 GetActiveThreads();
	void SetActiveThreads(s32 count);
	void SetPriority(SchedulingPriority level);
	SchedulingPriority GetPriority();

	void Execute(iWorkBuffer* buffer);
	void Submit(iFence* fence);
	void Submit(iThreadTimes* times);
}
