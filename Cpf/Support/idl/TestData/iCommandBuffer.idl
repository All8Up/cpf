module cpf::graphics;

// Imports.
import types from cpf;
import iUnknown from cpf::gom;
import Rectangle from cpf::math;

// Forward refereneces.
struct iImage;
struct iDevice;
struct iSampler;
struct iResource;
struct iPipeline;
struct iImageView;
struct iSwapChain;
struct iCommandPool;
struct iIndexBuffer;
struct iVertexBuffer;
struct iConstantBuffer;
struct iResourceBinding;

struct Viewport;
struct ResourceData;
struct RenderPassBeginDesc;

enum PrimitiveTopology : i32;
enum SubResource : i32;
enum ResourceState : i32;
enum DepthStencilClearFlag : i32;

// Errors specific to this interface.
failure AlreadyInRenderPass("Graphics", "Already in render pass");
failure NotInRenderPass("Graphics", "Not in a render pass");

enum CommandBufferType : i32
{
	Primary,
	Secondary,
	Compute,
	Copy
}

// The interface.
interface iCommandBuffer : iUnknown
{
	void Begin(iCommandBuffer* primary);
	void End();

	void Reset(iCommandPool*);
	void UpdateSubResource(iResource* src, iResource* dst, const ResourceData* data);
	void CopyResource(iResource* src, iResource* dst);

	void ResourceBarrier(iResource* resource, ResourceState startStart, ResourceState endState);
	void ImageTransition(iImage* image, ResourceState startState, ResourceState endState, SubResource subResources);

	void SetResourceBinding(iResourceBinding* binding);
	void SetPipeline(iPipeline* pipeline);
	void SetViewports(i32 count, const Viewport* rects);
	void SetScissorRects(i32 count, const Math::Rectanglei* rects);
	void SetTopology(PrimitiveTopology topology);
	void SetVertexBuffers(i32 startSlot, i32 viewCount, iVertexBuffer**);
	void SetIndexBuffer(iIndexBuffer*);
	void SetConstantBuffer(i32 index, iConstantBuffer*);
	void SetConstants(i32 index, i32 count, const void*, i32 offset);
	void SetSampler(i32 index, iSampler*);
	void SetImage(i32 index, iImage*);

	void DrawInstanced(i32 vertsPerInstance, i32 instances, i32 startVert, i32 startInstance);
	void DrawIndexedInstanced(i32 vertsPerInstance, i32 instances, i32 startVert, i32 offset, i32 startInstance);

	// Render passes.
	result BeginRenderPass(RenderPassBeginDesc*);
	result NextSubPass();
	result EndRenderPass();

	// Secondary command buffer insertion.
	result Insert(i32 count, iCommandBuffer* const*);
};
