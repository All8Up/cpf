use std::str::FromStr;
use ast::{Data, NodeRef};

grammar;


Import: NodeRef<Data> =
{
	"import" <n:r"[_a-zA-Z][_a-zA-Z0-9]+"> =>
		NodeRef::new(Data::Import {name: n.to_string()})
};

Namespace: NodeRef<Data> =
{
	"namespace" <n:r"[_a-zA-Z][_a-zA-Z0-9]+"> "{" <i:NamespaceScopeStmt> "}" =>
	{
		let mut n = NodeRef::new(Data::Namespace {name: n.to_string()});
		n.append(i);
		n
	}
};

NamespaceScopeStmt: NodeRef<Data> =
{
	Namespace,
	=> NodeRef::new(Data::Empty)
};

GlobalScopeStmt: NodeRef<Data> =
{
	Import,
	Namespace
};

GlobalScopeStmts: NodeRef<Data> =
{
	<s:GlobalScopeStmt> => s,
	<l:GlobalScopeStmts> <r:GlobalScopeStmt> =>
	{
		l.insert_after(r);
		l
	}
};

pub IDL: NodeRef<Data> =
{
	GlobalScopeStmts,
	=> NodeRef::new(Data::Module)
};
