use ast::{Data, NodeRef};

grammar;

Identifier: &'input str =
{
	<s:r"[_a-zA-Z][_a-zA-Z0-9]+"> => s
};

Import: () = {"import"};
Namespace: () = {"namespace"};
Interface: () = {"interface"};

ImportStmt: NodeRef<Data> =
{
	Import <n:Identifier> =>
		NodeRef::new(Data::Import {name: n.to_string()})
};

NamespaceStmt: NodeRef<Data> =
{
	Namespace <n:Identifier> "{" <i:NamespaceScopeStmt> "}" =>
	{
		let n = NodeRef::new(Data::Namespace {name: n.to_string()});
		n.append(i);
		n
	}
};

InterfaceStmt: NodeRef<Data> =
{
	Interface <n:Identifier> ";" => NodeRef::new(Data::FwdInterface {name: n.to_string()}),
	Interface <n:Identifier> "{" "}" =>
	{
		NodeRef::new(Data::Interface {name: n.to_string()})
	}
};

GlobalScopeStmt: NodeRef<Data> =
{
	ImportStmt,
	InterfaceStmt,
	NamespaceStmt
};

NamespaceScopeStmt: NodeRef<Data> =
{
	NamespaceStmt,
	InterfaceStmt,
	=> NodeRef::new(Data::Block)
};

// Returns a block of all global statments.
GlobalScopeStmts: NodeRef<Data> =
{
	<s:GlobalScopeStmt> =>
	{
		let n = NodeRef::new(Data::Block);
		n.append(s);
		n
	},
	<l:GlobalScopeStmts> <r:GlobalScopeStmt> =>
	{
		l.append(r);
		l
	}
};

pub IDL: NodeRef<Data> =
{
	GlobalScopeStmts
};
