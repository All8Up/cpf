//////////////////////////////////////////////////////////////////////////
#pragma once
#include "Platform/Threading/Types.hpp"


namespace CPF
{
	namespace Threading
	{
		//////////////////////////////////////////////////////////////////////////
		/// Threading synchronization semaphore.
		//////////////////////////////////////////////////////////////////////////
		class Semaphore
		{
		public:
			//////////////////////////////////////////////////////////////////////////
			Semaphore(int initCount = 0);
			~Semaphore();

			//////////////////////////////////////////////////////////////////////////
			void Acquire();
			void Release(int count = 1);

		private:
			//////////////////////////////////////////////////////////////////////////
			Semaphore(const Semaphore&) = delete;
			Semaphore& operator =(const Semaphore&) = delete;
			Semaphore(Semaphore&&) = delete;
			Semaphore& operator =(Semaphore&&) = delete;

			//////////////////////////////////////////////////////////////////////////
			Semaphore_t m_Handle;
		};
	}
}

#include "Platform/Threading/Semaphore.hpp"
