//////////////////////////////////////////////////////////////////////////
#pragma once
#include "Export.hpp"
#include "Platform/Threading/Types.hpp"


namespace Cpf
{
	namespace Threading
	{
		//////////////////////////////////////////////////////////////////////////
		/// @brief Basic mutex wrapper.
		//////////////////////////////////////////////////////////////////////////
		class Mutex
		{
		public:
			//////////////////////////////////////////////////////////////////////////
			Mutex(bool initial = false);
			~Mutex();

			//////////////////////////////////////////////////////////////////////////
			void Acquire();
			bool TryAcquire();
			void Release();

			//////////////////////////////////////////////////////////////////////////
			Mutex_t& NativeHandle();

		private:
			//////////////////////////////////////////////////////////////////////////
			Mutex(Mutex&&) = delete;
			Mutex& operator =(Mutex&&) = delete;
			Mutex(const Mutex&) = delete;
			Mutex& operator =(const Mutex&) = delete;

			//////////////////////////////////////////////////////////////////////////
			Mutex_t m_Handle;
		};
	}
}
#include "Platform/Threading/Mutex.hpp"
