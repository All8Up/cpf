import Result from CPF::GOM;
import iUnknown from CPF::GOM;
module CPF::Plugin;

failure InstanceExists ("Plugin", "Instance already exists");
failure NotInstalled ("Plugin", "Instance not installed");
failure NotLoaded ("Plugin", "Plugin not loaded");
failure CantUnload ("Plugin", "Plugin can not be unloaded");
failure ExportMissing ("Plugin", "Plugin does not expose correct function");

struct IID_CID;
interface iClassFactory;

interface iRegistry : GOM::iUnknown
{
	/**
	* @brief Attempts to load a library as a plugin.
	* @param library The library to load.
	* @return A result code.
	*/
	result Load(const char* library);

	/**
	* @brief Unloads the given library.
	* @param library The library to unload.
	* @return A result code.
	*/
	result Unload(const char* library);

	/**
	* @brief Installs a class instance.
	* @param cid The class instance id.
	* @param [in,out] clsInst The class instance object.
	* @return A result code.
	*/
	result Install(GOM::CID cid, iClassFactory* clsInst);

	/**
	* @brief Removes a class instance.
	* @param cid The instance id.
	* @return A result code.
	*/
	result Remove(GOM::CID cid);

	/**
	@brief Gets the class instance associated with the cid.
	@param cid The cid of interest.
	@param clsInst Pointer to the resulting interface pointer.
	@return A result code.
	*/
	result GetClassInstance(GOM::CID cid, iClassFactory** clsInst);

	/**
	* @brief Check if a class id has a class instance installed.
	* @param cid The class instance id.
	* @return A result code.
	*/
	result Exists(GOM::CID cid);

	/**
	* @brief Creates an instance.
	* @param [in,out] outer Aggregation outer object or null.
	* @param cid The class instance id to create.
	* @param iid The interface id to store in the result.
	* @param [out] result Various error codes or GOM::kOK.
	* @return A result code.
	*/
	result Create(iUnknown* outer, GOM::CID cid, u64 iid, void** outIface);

	/**
	* @brief Install a set of class id's and instance id's.
	* @param count The number of pairs in the array.
	* @param pairs The interface id and the class id's which implement them.
	* @return A result code.
	*/
	result ClassInstall(s32 count, const IID_CID* pairs);

	/**
	* @brief Remove a set of class id's and instance id's.
	* @param count The number of pairs in the array.
	* @param pairs The interface id and the class id pairs to remove.
	* @return A result code.
	*/
	result ClassRemove(s32 count, const IID_CID* pairs);

	/**
	* @brief Looks up class id's which implement a specific interface id.
	* @param id The interface id to look up.
	* @param [in,out] count A count variable to retried the number of class id's or the size of the cid array.
	* @param [in,out] cid The output array of class id's.
	* @return A result code.
	*/
	result GetClasses(u64 id, s32* count, GOM::CID* cid);

	/**
	* @brief Install an instance for the given interface id.
	* @param id The interface id for the singleton.
	* @param [in,out] instance If non-null, the instance pointer to install.
	* @return A GOM::Result, kOK if all is ok.
	*/
	result InstanceInstall(u64 id, iUnknown* instance);

	/**
	* @brief Remove an instance from the instances.
	* @param id The interface id for the singleton.
	* @return A GOM::Result, kOK if the instance was removed.
	*/
	result InstanceRemove(u64 id);

	/**
	* @brief Get the instance for the given interface.
	* @param id The interface id for the singleton.
	* @param [in,out] outIface If non-null, the output.
	* @return The GOM::Result, kOK if the instance was found and put in the output.
	*/
	result GetInstance(u64 id, iUnknown** outIface);
}
